================================================================================
Logic_Final.py 변경 사항 비교 (현재 버전 vs 제공된 코드)
================================================================================

📅 작성일: 2024년
📝 목적: 두 버전 간 차이점 분석 및 현재 버전의 개선 사항 정리

================================================================================
주요 차이점 요약
================================================================================

현재 버전 (개선된 버전):
- 전화번호/생년월일 오탐지 필터링 강화
- 이름/조직명 탐지 정확도 대폭 향상
- NER 512 토큰 제한 해결
- 조합 위험도 분석 개선
- 디버그 로그 제거

제공된 코드 (구버전):
- 기본적인 정규식 패턴만 사용
- NER 결과를 그대로 사용 (필터링 부족)
- 추가 탐지 함수 (detect_names_by_regex, detect_address) 포함
- 우편번호(zipcode) 탐지 포함
- HWP 띄어쓰기 정규화 기능 포함

================================================================================
1. 전화번호 탐지 로직 차이
================================================================================

[현재 버전 - 강화된 검증]
✅ 전화번호 길이 검증 (9~11자리)
✅ 유효한 지역번호 prefix 검증
✅ 날짜 패턴 인접 시 제외
✅ 앞뒤 영문자 붙어있으면 제외
✅ 연속된 숫자 패턴 제외
✅ normalized 패턴에도 동일 검증 적용

[제공된 코드 - 기본 패턴만]
❌ 정규식 패턴만 사용
❌ 추가 검증 없음
❌ 오탐지 가능성 높음

코드 위치: detect_by_regex() 함수

================================================================================
2. 생년월일 탐지 로직 차이
================================================================================

[현재 버전 - 키워드 기반 필터링]
✅ 앞뒤 50글자 범위에서 키워드 검색
✅ 필수 키워드: '생년월일', '생일', '출생' 등
✅ 제외 키워드: '입사', '퇴사', '계약' 등
✅ 키워드 조건 만족 시에만 탐지

[제공된 코드 - 패턴만]
❌ 정규식 패턴만 사용
❌ 입사일, 계약일 등도 탐지됨

코드 위치: detect_by_regex() 함수

================================================================================
3. 이름(NER) 탐지 로직 차이
================================================================================

[현재 버전 - 다층 필터링]
✅ exclude_words 사전 (헤더, 지명, 직위, 일반명사)
✅ 3글자 한글 이름만 허용
✅ 성씨로 시작하는지 검증
✅ 숫자 포함 제외
✅ 조사로 끝나는 단어 제외
✅ 조직 키워드 포함 시 ORG로 분류
✅ 중복 방지 (detected_names set)

[제공된 코드 - 기본 필터링]
❌ NAME_BLACKLIST만 사용 (컴퓨터, 키보드, 마우스)
❌ 조직 키워드 필터링 부족
❌ 신뢰도(score) 기반 필터링만 적용
❌ 오탐지 가능성 높음

코드 위치: detect_by_ner() 함수

================================================================================
4. 조직명(ORG) 탐지 로직 차이
================================================================================

[현재 버전 - 강화된 필터링]
✅ 화이트리스트 조직명 추가
✅ "-" 또는 숫자로 시작하는 조직명 제외
✅ "○", "□" 포함된 조직명 제외
✅ 학교 단독 단어 제외
✅ 조직명 분할 처리 (공백/키워드 기준)
✅ 중복 방지 (부분 문자열 포함)

[제공된 코드 - 기본 처리]
❌ 기본 NER 결과만 사용
❌ 오탐지 필터링 부족

코드 위치: detect_by_ner() 함수

================================================================================
5. 주소(LC) 탐지 로직 차이
================================================================================

[현재 버전 - 정규식 우선]
✅ 완전한 주소 패턴 정규식으로 우선 탐지
✅ NER의 LC 라벨은 스킵 (중복 방지)
✅ 중복 방지 (detected_addresses set)

[제공된 코드 - 별도 함수]
✅ detect_address() 함수 사용
✅ 시/도 기반, 우편번호, 도로명, 영문 주소 탐지
✅ 더 다양한 주소 패턴 지원

차이점: 제공된 코드가 주소 탐지 범위가 더 넓음

코드 위치: detect_by_ner() vs detect_address()

================================================================================
6. NER 모델 512 토큰 제한 해결
================================================================================

[현재 버전 - 분할 처리]
✅ 텍스트 분할 처리 (500자 단위)
✅ chunk 방식으로 NER 실행
✅ 결과 병합

[제공된 코드 - 제한 없음]
❌ 분할 처리 없음
❌ 긴 텍스트 입력 시 에러 가능

코드 위치: detect_by_ner() 함수

================================================================================
7. 조합 위험도 분석 차이
================================================================================

[현재 버전 - 준식별자 필터링]
✅ 조직명만 2개 이상 → 제외
✅ 조직명+주소만 → 제외
✅ 조직명+주소+직책만 → 제외
✅ 개인 특정 불가능한 조합 제외

[제공된 코드 - 기본 분석]
❌ 준식별자 필터링 없음
❌ 조직명+주소도 위험으로 판단

코드 위치: analyze_combination_risk() 함수

================================================================================
8. 추가 탐지 함수 차이
================================================================================

[현재 버전]
❌ detect_names_by_regex() 없음 (NER 전담)
❌ detect_address() 없음 (NER 내부 처리)

[제공된 코드]
✅ detect_names_by_regex() 함수 (비활성화 상태)
   - 한글 2~4자 단어를 이름 후보로 탐지
   - 블랙리스트/성씨 필터 적용
   - 주석: "오탐지율이 높아 NER 모델 전담으로 변경"

✅ detect_address() 함수
   - 시/도 기반 주소 탐지
   - 우편번호(zipcode) 탐지
   - 도로명/지번 탐지
   - 영문 주소 탐지

차이점: 제공된 코드가 더 많은 보조 함수 포함

================================================================================
9. 우편번호(zipcode) 탐지
================================================================================

[현재 버전]
❌ 우편번호 탐지 없음

[제공된 코드]
✅ 우편번호 탐지 포함
   - 5자리 신형 우편번호
   - 3-2 형식 우편번호
   - 주석: "6자리 구형 우편번호는 운전면허번호와 충돌하여 제외"

차이점: 제공된 코드가 우편번호 탐지 지원

코드 위치: detect_address() 함수

================================================================================
10. HWP 파일 처리 차이
================================================================================

[현재 버전]
✅ HWP 이미지 OCR 항상 실행
✅ 본문 텍스트와 OCR 결과 병합
✅ 띄어�기 정규화 없음

[제공된 코드]
✅ HWP 이미지 OCR 항상 실행
✅ 본문 텍스트와 OCR 결과 병합
✅ HWP 한글 띄어쓰기 정규화 적용
   - 정규식: r'([가-힣])\s+([가-힣])(?=\s|[가-힣]|$)'
   - 반복 적용하여 불필요한 띄어쓰기 제거

차이점: 제공된 코드가 띄어쓰기 정규화 기능 추가

코드 위치: parse_file() 함수 - HWP 처리 블록

================================================================================
11. win32com 절대 경로 처리
================================================================================

[현재 버전]
❌ 상대 경로 사용

[제공된 코드]
✅ os.path.abspath() 사용
   - HWP → HWPX 변환 시
   - XLS → XLSX 변환 시
   - PPT → PPTX 변환 시
   - 주석: "COM 객체는 절대 경로를 사용해야 HWP 변환 오류(-2147352562)를 방지"

차이점: 제공된 코드가 COM 오류 방지 처리 포함

코드 위치: parse_file() 함수 - win32com 사용 블록

================================================================================
12. 중복 탐지 방지 차이
================================================================================

[현재 버전]
✅ seen_values set 사용 (detect_by_regex)
✅ detected_names set 사용 (detect_by_ner)
✅ detected_orgs set 사용 (detect_by_ner)
✅ detected_addresses set 사용 (detect_by_ner)

[제공된 코드]
❌ 중복 방지 로직 부족
✅ handle_input_raw에서 seen set 사용 (최종 단계)

차이점: 현재 버전이 더 세밀한 중복 방지

================================================================================
13. 디버그 로그 차이
================================================================================

[현재 버전]
✅ 모든 [DEBUG] 로그 제거
✅ 에러/경고 로그만 유지
✅ 프로덕션 환경 준비

[제공된 코드]
❌ 디버그 로그 없음 (원래부터)

차이점: 없음 (둘 다 디버그 로그 없음)

================================================================================
14. categorize_detection() 함수 차이
================================================================================

[현재 버전]
- identifier: PS, PER, phone, email, ssn, alien_reg, driver_license, passport, card, account, ip
- quasi: ORG, OG, student_id, birth, LC, position, LOC

[제공된 코드]
- identifier: PS, PER, phone, email, ssn, alien_reg, driver_license, passport, card, account
- quasi: ORG, OG, student_id, birth, LC, position, ip, LOC, address, zipcode

차이점:
- 현재 버전: ip를 identifier로 분류
- 제공된 코드: ip를 quasi로 분류, zipcode/address 추가

코드 위치: categorize_detection() 함수

================================================================================
15. handle_input_raw() 함수 차이
================================================================================

[현재 버전]
✅ 병렬 처리 (텍스트 추출 + 얼굴 탐지)
✅ 간결한 탐지 로직
✅ 중복 제거 없음 (각 함수에서 처리)

[제공된 코드]
✅ 순차 처리
✅ detect_names_by_regex() 호출 (비활성화)
✅ detect_address() 호출
✅ seen set으로 최종 중복 제거
✅ 반환값 차이: 마지막 인자가 [] (빈 리스트)

차이점:
- 현재 버전: 병렬 처리로 성능 향상
- 제공된 코드: 더 많은 탐지 함수 호출

코드 위치: handle_input_raw() 함수

================================================================================
권장 사항
================================================================================

현재 버전에 추가하면 좋은 기능 (제공된 코드에서):
1. ✅ HWP 띄어쓰기 정규화 기능
2. ✅ win32com 절대 경로 처리 (COM 오류 방지)
3. ✅ detect_address() 함수 (더 다양한 주소 패턴)
4. ✅ 우편번호(zipcode) 탐지 (선택적)

제공된 코드에 추가하면 좋은 기능 (현재 버전에서):
1. ✅ 전화번호 오탐지 필터링 강화
2. ✅ 생년월일 키워드 기반 필터링
3. ✅ 이름/조직명 다층 필터링
4. ✅ NER 512 토큰 제한 해결
5. ✅ 조합 위험도 준식별자 필터링
6. ✅ 병렬 처리 (성능 향상)

================================================================================
결론
================================================================================

현재 버전의 장점:
- 오탐지 최소화에 집중
- 정확도 우선
- 프로덕션 환경 준비
- 성능 최적화 (병렬 처리)

제공된 코드의 장점:
- 더 넓은 탐지 범위 (우편번호, 다양한 주소 패턴)
- HWP 띄어쓰기 정규화
- COM 오류 방지 처리
- 보조 탐지 함수 풍부

최적의 버전:
현재 버전 + 제공된 코드의 다음 기능
1. HWP 띄어쓰기 정규화
2. win32com 절대 경로 처리
3. detect_address() 함수 (선택적)

================================================================================
